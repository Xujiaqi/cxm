#!/bin/bash
#
# Init file for SVNWatcher daemon
#
# chkconfig: 345 98 00
# description: SVNWatcher daemon
#

# source function library
. /etc/rc.d/init.d/functions

prog="svnwatcherd"
RETVAL=0

PID_FILE="/var/run/${prog}.pid"
TAC_FILE=$(python -c "import cxm, os; print os.path.dirname(cxm.__file__)")/${prog}.tac
LOG_DIR="/var/log/cxm/"
SVN_REPO="/etc/xen/vm"
START_MODE="standalone"  # "standalone" or "cluster"

# used by svn to get password recorded in ~/.subversion
export HOME="/root"

# Read system specific configuration
[ -r /etc/sysconfig/svnwatcherd ] && source /etc/sysconfig/svnwatcherd

# check for required files
if [ ! -x /usr/bin/twistd ]; then
	echo -n "$0: /usr/bin/twistd not found !"
	failure
	echo
	exit 1
fi

# set up run directory if necessary
[ ! -d "${LOG_DIR}" ] && mkdir -p "${LOG_DIR}"


case "$1" in
	start)
		echo -n "Starting $prog"

		# Updating repo at startup
		svn update $SVN_REPO >> $LOG_DIR/$prog.log

		if [ -n "$(svn status $SVN_REPO)" ]; then
			echo 
			echo -n "Svn repository $SVN_REPO is not clean."
			failure
			echo
			exit 2
		fi		

		if [ "$START_MODE" == "cluster" ]; then
			# Leave cxmd 5 seconds max to start
			COUNTER=5
			while [ "$(cxmd_ctl --ping 2>/dev/null)" != "OK" -a $COUNTER -gt 0 ]; do
				echo -n "."
				let COUNTER-=1
				sleep 1
			done
			if [ "$(cxmd_ctl --ping 2>/dev/null)" != "OK" ]; then
				echo -n " cxmd daemon is not running !"
				failure
				echo
				exit 2
			fi
		fi
		
		/usr/bin/twistd -y $TAC_FILE --pidfile=$PID_FILE --logfile=$LOG_DIR/$prog.log
		RETVAL=$?
		[ "$RETVAL" = 0 ] && success || failure
		[ "$RETVAL" = 0 ] && touch /var/lock/subsys/$prog
		echo
		;;

	stop)
		echo -n "Stopping $prog"
		if [ -e "$PID_FILE" ]; then
			kill `cat $PID_FILE`
			success
		else
			echo -n " : pidfile not found !"
			failure
		fi
		echo
		RETVAL=$?
		[ "$RETVAL" = 0 ] && rm -f /var/lock/subsys/$prog
		;;

	update)
		echo -n "Triggering an update with $prog"
		if [ -e "$PID_FILE" ]; then
			kill -HUP `cat $PID_FILE`
			success
		else
			echo -n " : pidfile not found !"
			failure
		fi
		echo
		RETVAL=$?
		;;

	restart)
		"${0}" stop
		"${0}" start
		;;

    status)
        status -p $PID_FILE $prog
        RETVAL=$?
        ;;

    *)
        echo $"Usage: $0 {start|stop|update|restart|status}"
        RETVAL=1
esac

exit $RETVAL

# EOF
