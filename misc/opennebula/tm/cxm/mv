#!/bin/bash 

# tm/cxm - OpenNebula transfert manager for cxm
# Copyleft 2012 - Nicolas AGIUS <nicolas.agius@lps-it.fr>
#
# Some part of code are inspired from OpenNebula 
# Copyright 2002-2012, OpenNebula Project Leads (OpenNebula.org)

###########################################################################
#
# This file is part of cxm.
#
# cxm is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
###########################################################################

# MV <hostA:system_ds/disk.i|hostB:system_ds/disk.i> vmid dsid
#    <hostA:system_ds/|hostB:system_ds/>
#   - hostX is the target host to deploy the VM
#   - system_ds is the path for the system datastore in the host
#   - vmid is the id of the VM
#   - dsid is the target datastore (0 is the system datastore)

SRC=$1
DST=$2
VM_ID=$3
DS_ID=$4

if [ -z "${ONE_LOCATION}" ]; then
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
else
    TMCOMMON=$ONE_LOCATION/var/remotes/tm/tm_common.sh
fi

source $TMCOMMON
source $(dirname $0)/../../cxmrc

#-------------------------------------------------------------------------------
# Set dst path and dir
#-------------------------------------------------------------------------------
SRC=`fix_dir_slashes $SRC`
DST=`fix_dir_slashes $DST`

SRC_PATH=`arg_path $SRC`
DST_PATH=`arg_path $DST`

SRC_HOST=`arg_host $SRC`
DST_HOST=`arg_host $DST`

DST_DIR=`dirname $DST_PATH`

SRC_DS_DIR=`dirname  $SRC_PATH`
SRC_VM_DIR=`basename $SRC_PATH`

#-------------------------------------------------------------------------------
# Return if moving a disk, we will move them when moving the whole system_ds
# directory for the VM
#-------------------------------------------------------------------------------
if [ `is_disk $DST_PATH` -eq 1 ]; then
	exit 0
fi

if [ "$SRC" == "$DST" ]; then
    log "Not moving $SRC to $DST, they are the same path"
	exit 0
fi

ssh_exec_and_log "$DST_HOST" "rm -rf '$DST_PATH'" \
    "Error removing target path to prevent overwrite errors"

ssh_make_path "$DST_HOST" "$DST_PATH"

log "Moving $SRC to $DST"

if [ "$SRC_HOST" == "$HOSTNAME" ]; then
    # From frontend to host, SRC is localhost
    send_all_disks $SRC_PATH $DST_HOST $DST_PATH

    # Clean source
    exec_and_log "rm -rf $SRC_PATH"

elif [ "$DST_HOST" == "$HOSTNAME" ]; then
    # From host to frontend, DST is localhost
    get_all_disks $SRC_HOST $SRC_PATH $DST_PATH
    remove_all_lv $SRC_HOST $SRC_PATH

    # Clean source
    ssh_exec_and_log $SRC_HOST "rm -rf $SRC_PATH"

else
    log_error "MIGRATE not supported by this TM."
    exit 0
fi

exit 0

# vim: ts=4:sw=4:ai
